

&和&&  区别：

		都是逻辑运算符，都是判断两边同时真则为真，否则为假；
		
		
		&&	第一个条件flus		停止，
		&	第一个条件flus		后面继续 到语句停止


键盘输入：

		Scanner sac = new Scanner(System.in);
		int nextInt = sac.nextInt();

函数的特点

		封装代码
		复用性高
		调用才执行
	
函数重载
		
		函数名相同，参数不同（参数列表，参数类型），与返回值无关

数组

		元素类型[] 数组名 = new 元素类型[元素个数或数组长度];
			int[] arr = new int[10];			

		元素类型[] 数组名 = new 元素类型[]{元素，元素，……};
			int[] arr = new int[]{3,5,1,7};
			int[] arr = {3,5,1,7};			C语言常为：int arr[] = {3,5,1,7};
		
		优点：容器 自动编排  容易查找


		例题：	
				取最大值
				直接排序、冒泡、折半（二分）、翻转



栈内存
		局部变量   ： 使用完就自动释放

堆内存
		存储（数组和对象，new ） ：	一个对象一个内存地址
									对象都有默认初始值
		没有实体对象 jvm就会自动清理垃圾

二维数组

		数组类型[][] 数组名 = new 数组类型[行][列];

成员变量与局部变量 区别
		，
		应用范围  
			成员变量在整个类内都有效    
			局部变量只在其声明的方法内有效
		生命周期  
			成员变量: 它属于对象，它随着对象的创建而创建，随着对象的消失而消失 
			局部变量: 使用完马上释放空间。

匿名对象（通常只调用一次）

		没有名字的实体，（没有对应的变量名引用）

封装的好处

		隐藏了类的具体实现
		操作简单
		提高对象数据的安全性


构造方法

		对对象进行初始化

		类名和方法名一样

this.x	当前函数的x



static 特点
		1 随着类的加载而加载，静态会随着类的加载而加载，随着类的消失而消失。说明它的生命周期很长。
      	2 优先于对象存在。-->静态是先存在，对象是后存在。
     	3 被所有实例(对象)所共享。
      	4 可以直接被类名调用	

静态变量（类变量）和实例变量的区别:
    	1存放位置
        	1：类变量随着类的加载而加载存在于方法区中.
				2：实例变量随着对象的建立而存在于堆内存中.
			2生命周期
				1：类变量生命周期最长,随着类的消失而消失.
				2：实例变量生命周期随着对象的消失而消失.

静态优缺点
		优点:对对象的共享数据进行单独空间的存储,节省空间 
		缺点：生命周期过长
          	  访问出现局限性。（静态只能访问静态）

什么时候定义静态变量
		静态变量（类变量）当对象中出现共享数据
		对象的数据要定义为非静态的存放在对内存中（学生的姓名，学生的年龄）

什么时候定义静态函数
	如果功能内部没有访问到非静态数据
	（对象的特有数据。那么该功能就可以定义为静态）


继承  extends
	描述类和类的关系
	减少同类（同对象）中的重复代码

super.x
	继承中使用，存在于子类中
	访问父类的属性、函数、构造函数

this指向的是当前对象的调用，super指向的是当前调用对象的父类
















































































