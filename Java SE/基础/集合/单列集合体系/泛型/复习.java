
单例集合 的体系：
----------------------------------------------------------------------------------------------------------------

---------| Collection 单例集合的根接口
------------| List  如果是实现了List接口的集合类， 具备的特点：有序，重复。
---------------| ArrayList  底层 是使用了Object数组实现的，特点： 查询速度快，增删慢。
---------------| LinkedList 底层是使用了链表数据结构实现 的， 特点： 查询速度慢，增删快。
---------------| Vector Vector的实现与ArrayList是一致，但是是线程安全 的，操作效率低。 jdk1.0的时候出现的
------------| Set  如果是实现了Set接口的集合类，具备的特点：无序，不可重复。
----------------| HashSet  底层是使用了一个哈希表支持的， 特点：存取速度快。


HashSet 添加元素的原理：
	往HashSet添加元素的时候，首先HashSet会调用元素的hashCOde方法得到元素的哈希码值，然后会经过一系列运算
	就可以算出该元素在哈希表中的存储位置/
	
	情况1：如果算出该元素的位置目前没有任何元素存储，那么该元素可以直接存储　
	
	情况2： 如果算出该元素的位置目前已经存有其他的元素，那么还会调用元素的equals方法与该位置的元素再比较一次。
	如果equals方法返回的是false，那么该元素允许存储，如果euqlas方法返回的是true，那么该元素被视为重复元素，不允许存储。
------------------| TreeSet  底层是使用了红黑树（二叉树）数据结构实现的， 特点：会对元素进行排序存储。

TreeSet 要注意的事项：
	1. 往TreeSet添加元素的时候，如果元素本身具备自然顺序的特性，那么会根据元素自然顺序的特性进行排序存储。
	2. 往TreeSet添加元素的时候，如果元素本身不具备自然顺序的特性，那么元素所属的类必须要实现Comparable接口，把元素的比较规则定义
	在CompareTo方法上。
	3. 往TreeSet添加元素的时候，如果元素本身不具备自然顺序的特性，而且元素所属的类没有实现COmparable接口，那么必须要在创建
	TreeSet对象的时候传入比较器。
	4. 如果比较的方法(CompareTo 或者Compare )返回的是0的时候，那么该元素就被视为重复元素，不允许添加。
	
	比较器的定义格式：  自定义一个类实现COmparator接口即可。
		
		class 类名  implements Comparator{
		
		}

泛型：泛型是jdk1.5出现的新特性。

泛型的好处：
	1. 将运行时出现 的问题提前至了编译时。
	2. 避免了无谓强制类型转换。
	
	
自定义泛型： 自定义泛型就是一个数据类型的占位符或者理解为一个数据类型的变量。	
	
泛型方法:
	
	修饰符  <声明自定义的泛型>返回值类型  函数名(自定义的泛型  变量名..)
	
泛型方法要注意的事项： 
	1. 泛型方法中 的自定义泛型的具体数据类型是在调用该函数的时候传入实参时确定的。
	2. 自定义泛型所用 的标识符只要符合标识符 的命名规则即可。但是我们一般都习惯使用一个大写字母表示。
	

泛型类：

	泛型类的定义格式
		
		class 类名<声明自定义的泛型>{
		
		}

泛型类要注意的事项：
	1. 泛型类上的自定义泛型是在使用该类创建对象的时候指定具体的数据类型的。
	2. 如果一个类已经自定义了泛型，使用该类创建对象的时候如果没有指定泛型的具体数据类型，那么默认为Object类型。
	3. 静态的函数不能使用类上自定义的泛型，如果静态函数需要使用，必须要在函数上自定义泛型。
	

泛型接口：

	泛型接口的定义格式：
		
		interface 接口名<声明自定义的泛型>{
		
		}
	
泛型接口要注意事项：
	1. 泛型接口上的自定义泛型是在实现该接口的时候指定具体数据类型的。
	2. 如果实现接口的时候没有指定接口上 的自定义泛型的具体数据类型，那么默认为Object数据类型。
	3. 如果需要在创建接口实现类对象的时候才指定接口上自定义泛型，那么需要以下格式：	class<T> 类名  implements  接口<T>
		

泛型上下限：
	
	? super Integer   允许是Integer数据类型或者是Integer父类类型       泛型的下限
	
	
	?  extedns Number  允许是Number数据类型或者是Number子类的数据类型   泛型的上限。
	
