---------------------------功能按键------------------------------------------
   jvm     java虚拟机
   
   println   多个 ln 自带换行
   print 

 
   "/t"  空格

   Crel + n :		新建一个文本
   Crel + j :		复制多一行 
   Crel + d :		日期    	2016/3/25 星期五         
   Crel + m :		时间		上午 8:15			 
   Crel + a :		全选
   Crel + x :		删除这一行
   Crel + Tab :		切换文本

--------------------------------------------------
键盘录入数据：
		1.创建一个对象
		2.调用扫描器对象的newtInt的方法扫描
		3.导入包   

		例题
		Scanner scan = new Scanner();		//对象
		int a = scan.nextInt();				//整型	
		String a = scan.next();				//字符串型
		float a = scan.nextFloat();			//浮点型
		...
-------------------------------------------------
2.1
--------------------------------------------------------
标识符: 在java程序中有些名字是可以自定义的，那么这些自定义的名字我们就
称作为自定义的标识符。

标识符要注意的细节：
		1. 标识符的组成元素是由 字母（a-zA-Z） 、数字(0-9) 、 下划线(_)、 美元符号($).
		2. 标识符不能以数字开头。//字母 数字 下划线 美服
		3. 标识符是严格区分大小写的。
		4. 标识符的长度是没有长度限制的。
		5. 标识符的命名一般要有意义（要做到让人见名知意）
		6. 关键字、保留字不能用于自定义的标识符。

自定义标识符的规范：
	1. 类名和接口名单词的首字母大写，其他单词小写。 比如： RunTime.
	2. 变量名与方法名首单词全部小写，其他单词首字母大写，其他小写。  比如： doCook()；
	3. 包名全部单词小写。
	4. 常量全部单词大写，单词与单词之间使用下划线分隔。  比如： UP_DIRECTION
	

判断一下那些是 符合的标识符:
	12abc_   不合法  数字不能开头
	_12abc    合法
	$ab12#    不合法  #号不属于标识符组成元素。
	abc@123   不合法  @号不属于标识符组成元素。 


关键字：关键字就是在java程序中具备特殊含义的标识符。关键字一般用于描述一个程序的
结构或者表示数据类型。

--------------------------------------------------------
2.2
--------------------------------------------------------
需求：编写一个java程序模拟QQ登陆.

注释： 注释就是使用文字对程序的说明，注释是写给程序员看的，编译器会忽略注释的 内容的。

注释的类别：
	
	第一种： 单行注释。   // 注释的内容

	第二种： 多行注释。   /* 注释的内容  */

	第三种： 文档注释.    /** 注释的内容  */

	文档注释也是一个多行注释。


注释要注意的细节：
	1. 单行注释可以嵌套使用，多行注意是不能嵌套使用的。

注释的作用：
	1. 使用文字对程序说明。
	2. 调试程序。
-------------------------------------------------------
2.3
-------------------------------------------------------
软件 =  数据 + 指令 + 文档(使用者文档+ 开发者文档)

多行注释与文档注释的区别： 
	 1.多行注释的内容不能用于生成一个开发者文档，
	 2.而文档注释 的内容可以生产一个开发者文档。


使用javadoc开发工具即可生成一个开发者文档。
	
	1.javadoc工具的使用格式：
		
		javadoc -d 存放文档的路径   java的源文件 
	

使用javadoc工具要注意细节：
	1. 如果一个类需要使用javadoc工具生成一个软件的开发者文档，那么该类必须使用public修饰。
	2. 文档注释注释的内容一般都是位于类或者方法的上面的。

写注释的规范：一般单行注释是位于代码的右侧，多行注释与文档注释一般是写在类或者方法的上面的。

写法如下：
/*
	该类是用于模拟QQ软件的
	@author 1208JAVA基础班全体同学
	@version 1.0

*/
public class Demo3 {  //一般的都是 cless 类名

	/**
	  操作的流程如下：
		1.首先先输入用户名密码
		2. 校验用户名与密码
		3. 展示好友列表
	*/
	public static void main(String[] args) {
		System.out.println("请输入用户名与密码");  //这句话是用于输入用户名与密码的。
		System.out.println("校验用户名与密码");
		System.out.println("展示好友列表");
	}
}
--------------------------------------------------
2.4
-------------------------------------------------------
常量: 常量就是程序在运行过程中其值不能发生改变的量。
       public static final 

常量的类别：     
		整数常量   10 12
		小数常量	3.14
		布尔常量   布尔常量只有两个值： true（"tu e"）(正确). false（"fo si"）(错误)
		字符常量   字符常量就是单个字符使用单引号引起来的内容我们称作为字符常量。
		字符串产量  字符串常量就是使用双引号引起来的内容称作为字字符串常量。


整数常量的表现形式：整数的表现形式主要是以不同的进制(二进制、八进制、十六进制)表现出来。

进制： 十进制（0~9） 、 星期（七进制 0~6）、 小时(12进制(0-11)、 24进制(0~23))

进制：用有限的数字符号代表所有的数值。

计算机的出现是为了服务于人类的，那么人类在现实生活中使用的数据基本上都是
十进制的数据，那么计算机是否有可以存储现实生活中的数据呢？如果可以存储
又以哪种形式存储呢？

二进制由来。


电脑记录我们现实生活中的数据都是使用二进制进行记录的，那么我们
就要懂得如何把十进制数据转换成二进制。

		
		十进制与二进制之间的转换：
			
			十进制转二进制的方法：使用十进制的数据不断除以2，直到商为0为止。从"下往上取余数"就是
			对应的二进制。 
			
			2(十进制)-------->10(二进制）

			二进制转十进制:使用二进制的每一位乘以2的n次方，n从0开始，每次递增1，然后把各部分的数据
			相加即可。
			
			 1110(二进制) ---------> 14(十进制)
		
		二进制的弊端： 二进制的书写太长了，不方便人类记忆。

		二进制的数据特点： 由0~1组成。

		解决方案：每三个二进制位就就记录一个数字。

		1000（十进制）------> 001,111,101,000（二进制） = 1,7,5,0
	
	一个八进制的数据就是相当于三个二进制位。

		
	十进制与八进制之间的转换：

			十进制转八进制:使用十进制的数据不断除以8，直到商为0为止。从下往上取余数就是
			对应的八进制。
				
				45(十进制)------>  55 （八进制）

			八进制转十进制：使用八进制的每一位乘以8的n次方，n从0开始，每次递增1，然后把各部分的数据
			相加即可。
						
				23(八进制)------>    (十进制)
	
	八进制数据的特点： 只有0~7这八个字符组成的。
	
	十六进制的数据: 0~9 , a（10）\b (11),c(12),d(13), e(14),f(15)， 四个二进制位就是一个十六进制的数据.

	十六进制的数据是有0~9、a-f这几个字符组成的。

	
		十进制转换成十六进制:使用十进制的数据不断除以16，直到商为0为止。从下往上取余数就是
			对应的十六进制。

			38(十进制)---->26  （十六进制）

		十六进制转十进制：使用十六进制的每一位乘以16的n次方，n从0开始，每次递增1，然后把各部分的数据
		相加即可。

			34(十六进制)-----> 52（十进制）


class Demo4{

	public static void main(String[] args){
		/*
		System.out.println(12); //整数常量
		System.out.println(3.14); //小数常量
		System.out.println(false); //布尔常量
		System.out.println('1'); //字符常量
		System.out.println("hello world"); //字符串常量

		如果一个数据没有加上任何的标识之前，默认就是十进制的数据。
		*/
		System.out.println(10);// 十进制
		System.out.println(0b10); //二进制 , 如果一个数据要表示二进制，那么要在该数据的前面加上0b开头。
		System.out.println(010); //八进制数据， 八进制的数据需要以0开头
		System.out.println(0x10); //十六进制数据， 十六进制的数据需要以0x开头
	}
}

if 语句 格式：
		if (判断条件)
			{    符合条件
			}else if (判断条件)
				{	符合条件	
				}else { 不符合条件 }
		注意：
			1. 如果符合条件后只有一个语句需要执行，那么可以省略大括号。但是建议不要省略，因为结构不清晰。
			2. if语句的判断条件后不能添加分号，否则会影响到执行的效果的

三元运算符 格式：
		布尔表达式？值一：值二; 
			1==1？是的：不是;




static (静态、修饰符)
	static修饰成"员变量"： 静态 共享 一份数据

	方式：
		一： 可以使用对象访问。
			对象.属性名
		二：可以使用类名访问。
			类名.属性名

	注意：	
		1.非静态成员不能使用 类名直接访问，要用对象访问。
		2.千万不要为了访问方便而用static修饰。一定要数据正真是需要被共享的时候才可以使用static修饰.

	static修饰"成员函数"：
			静态函数的访问方式
			一：可以使用对象访问
					对象.属性名
			二：可以使用类名访问
				类名.属性名
	建议使用类名访问静态的成员


	"静态函数"注意：
			1.非静态函数只能有对象调用，函数可以由类名或者对象进行调用。
			2.静态函数中不能直接访问非静态成员，可以直接访问静态成员。
			3.非静态函数可以直接访问非静态成员，也可以直接访问静态成员。
			4.静态函数中不能出现 this或super 关键字

单类设计模型：保证一个类在内存只有一个对象。

饿汉单例设计模型：
		1.私有化构造函数
		2.声明本类的引用类型变量并且指向本类的对象  (private static)
		3.提供一个公共静态的方法获取本类对象

懒汉单例设计模型：
		1.私有化构造函数
		2.声明本类的引用类型变向对象，但是不要创建对象
		3.提供一个公共静态的方法获取本类对象，"获取之前判断是否已经创建了"，如果没有就重创

继承
	
	格式： class 类名1 extends 类名2{
			}
	
	注意：
		1.父类私有对象的成员不能被继承
		2.父类构造函数不能被继承
		3.创建子类对象时，默认会先调用的无参构造函数，然后调用子类的构造函数

super 关键字：代表父类的引用空间。

	   作用：
			1.如果子父类存在同名成员时，在子类中默认是访问子类的成员，可以通过super关键字访问指定调用父类的构造行数
			2.创建子类对象时，默认会先调用父类的无参构造函数，可以通过super关键字访问指定调用子类的构造行数
		
		注意：
			1.如果在子类的构造函数中没有指定调用具体父类构造函数，那么java编译器会在子类构造函数上添加super()
			2.super 必须在第一个语句
			3.this 和 super 不能同时出现在同个构造函数中，都是要第一条语句

方法重载：子父类存在同名的函数

重写需求：如果父类功能的无法满足子类的需求，就重写

方法重写的要数：
			1."函数名与形参列表"必须一致
			2.子类的权限修饰符必须大于或等于父类 权限修饰符
			3.子父类的返回类型必须小于或等于父类返回值类型
			4.子父类的异常类型必须小于或等于父类的异常类型


instanceof ：判断一个对象是否属于某种类型
        格式：
		对象 instanceof 类

        使用前提：判断类的对象与类型 必须存在继承或者实现 关系

抽象类：
		是么时候用： 描述一类事物的时候，发现该事				  物确实存在某种行为，但是目				  前这种行为不具体，这时候应该				  抽取这种行为的声明而不去实				  现这种行为，此时称为抽象的行				  为，要用抽象类。
		
		注意：
			1.如果一个方法没方法体，那么该方法必须用abstract修饰
			2.如果一个类函数抽象方法，那么这个类肯定是一个抽象类或接口
			3.抽象类是含有构造方法
			4.抽象类不能创建对象
			5.抽象类可以存在非抽象方法与抽象方法
			6.抽象类可以不存在抽象方法
			7.非抽象类继承抽象类的时候，必须要把抽象类中所用方法全部实现

abstract 与 以下关键字结合：
			static 共同修饰一个方法
			private 共同修饰一个方法
			final 共同修饰一个方法
		
接口： 
		格式：
				interface 接口名
				{		成员变量
						成员函数
				}
				
		作用：
				1.程序解耦
				2.定义规范约束
				3.扩展功能

	注意细节：
				1.接口中成员变量都是常量，默认： public static final.
				2.接口中的方法全部都是抽象的方法， 默认是 public abstract
				3.接口不能创建对象
				4.接口没有构造函数
				5.非抽象类通过 implements （yin pe li mensi）实现接口的时候，必须把接口中的所有方法实现
