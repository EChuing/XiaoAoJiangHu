"-----------------------  JAVA正则 --------------------------------------------------------

预定义字符：
		.	任意字符
		\d 	数字：[0-9] 
		\D 	非数字： [^0-9] 
		\s 	空白字符：[ \t\n\x0B\f\r] 
		\S 	非空白字符：[^\s] 
		\w 	单词字符：[a-zA-Z_0-9] 
		\W 	非单词字符：[^\w]
 
 
  \r 回车
  \n 换行      所以要加	双斜杠

注意：任何预定义字符 没加上数量词 都只能匹配一个字符。




Greedy 数量词（要在前面加   预定义字符）
			?		一次或一次也没有			0-1
			*		零次或多次				0-n
			+		一次或多次 （最少一次）	1-n
			{n}		恰好n次					刚好固定次数
			{n,}	至少n次					>=n
			{n,m}	至少n次，但是不超过m次	[n,m]

 
 
 
 范围表示
 	注意：范围词里面不管内容有多长，没有数量词的配合 都只能匹配一个字符	
		
		[abc]	在 a  b  c 范围内 ， 只可以匹配一个
		[^abc]	除了abc 外的范围 
		[a-zA-Z]	a 到 z 或 A 到 Z，两头的字母包括在内（范围） 
		
	下面的相同
		[a-d[m-p]]	a 到 d 或 m 到 p：[a-dm-p]（并集） 
		[a-z&&[def]]	d、e 或 f（交集） 
		[a-z&&[^bc]]	a 到 z，除了 b 和 c：[ad-z]（减去） 
		[a-z&&[^m-p]]	a 到 z，而非 m 到 p：[a-lq-z]（减去）


单词边界匹配器
	$		行结尾
	\b		代表 单词的开始或结束字符，  但不匹配任何字符
 


匹配:
		matches（）;



切割：
		split();
	
	内容需要被复用 就要被分组   	
	
	分组的目的： 提高正则的复用性



替换 	
	(replaceAll)(String regex, String replacement));
	
	repalceTest()

查找：需要使用 Pattern

		指定为 字符串的正则表达式必须 首先被编译为此类的实例。 然后， 
		可将得到的正则对象匹配的任意的字符串用于创建 Matcher 对象，
		依照正则表达式，该对象可与任意字符序列匹配，   执行匹配所涉
		及的所有状态都 驻留在匹配去中 ，所以多个匹配可以共享同一模式。
		 
			 例如：
   
				   Pattern p = Pattern.compile("a*b");
				   Matcher m = p.matcher("aaaab");
				   boolean b = m.matches();

			查找需要使用到的对象：
					Pattern (正则对象类) 	
					Matcher(匹配器对象)

			匹配要使用到的方法：
					find()	通知匹配器去匹配字符串，  查找符合规则的字符串        找得到就返回 ture 没救 fales
					group()	获取符合规则的子串
			"注意:一定要 先用 find 匹配 ，再用 group 获取"
				

边界匹配符：
		\b：代表 单词的开始或结束字符，  但不匹配任何字符 
	






"-----------------------  JSP正则  --------------------------------------------------------

<head>
<script type="text/javascript">


表单的校验中常用


正则表达式的创建方式：

Java中写在 “” 里面
JavaScript写在 // 里面



	方式1：
			   /正则表达式/模式
			re=/pattern/[flags]
	
	方式2：
		 new RegExp("正则表达式",模式);
	re = new RegExp("pattern",["flags"])	
			pattern : 正则表达式 
			flags:	g （全文查找出现的所有 pattern） 
					i （忽略大小写） 
					m （多行查找）
	


正则表达式对象常用的方法：
	
	1.匹配		test()	使用正则对象去 匹配 字符串  
						如果匹配成功返回ture，否则返回false.	
	 
	 2.查找		exec()	根据正则表达式去 查找 字符串符合规则的内容。

	3.模式：
				g （全文查找出现的所有 pattern） 	
				i （忽略大小写）
"----------------------

（^ $ 规定范围） 默认在全部字符串中查找

^		开头，/^a/			匹配"an A"，而不匹配"An a" 
$		结尾，/a$/		匹配"An a"，而不匹配"an A" 
*		0次或以上
+		1至N，
?		0至1， 
(x)		匹配x保存x在名为$1...$9的变量中 
x|y		x或y 
{n}		N次 
{n,}	n次以上 
{n,m}	n-m次 
[xyz] 字符集(character set)，匹配这个集合中的任一一个字符(或元字符) 
[^xyz] 不匹配这个集合中的任何一个字符 
[\b]	退格符				
\b		单词的边界 
\B		单词的非边界 
\cX		/\cM/匹配Ctrl-M			这儿，X是一个控制符，
\d		字数字符，/\d/ = /[0-9]/ 
\D		非字数字符，/\D/ = /[^0-9]/ 
\n		换行符 
\r		回车符 
\s		空白字符，包括\n,\r,\f,\t,\v等 
\S		非空白字符，等于/[^\n\f\r\t\v]/ 
\t		制表符 
\v		重直制表符 
\w		可以组成单词的字符(alphanumeric，这是我的意译，含数字)，包括下划线，如[\w]匹配"$5.98"中的5，等于[a-zA-Z0-9] 
\W		不可以组成单词的字符，如[\W]匹配"$5.98"中的$，等于[^a-zA-Z0-9]。


"----------------------


	
	var str = "hello123";
	var reg = /^[A-Z0-9]+$/i;
	alert("匹配吗？"+reg.test(str));	

--------------------------------------------------------------------------------

查找出三个字符组成的单词。


	var str  ="da jia hao hao xue xi a";
	var reg = /\b[a-z]{3}\b/gi;         \b : 单词边界匹配器
	var line ="";
	while((line = reg.exec(str))!=null){
		document.write(line+"<br/>")
	}
	
	
</script>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<title>无标题文档</title>
</head>
